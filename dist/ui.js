class BasicElement extends HTMLElement {
	constructor(content) {
		super();

		this.self = this;

		if (content) {
			this.innerHTML = content;
		}

		this.remove = this.remove.bind(this);

		this.intervals = [];
	}

	/**
	 * Starts a interval timer that will stop when this element is no longer on the DOM
	 * 
	 * @param {*} callback 
	 * @param {Number} time in ms
	 */
	setInterval(callback, time){
		this.intervals.push(setInterval(()=>{
			if(!document.body.contains(this)){
				this.intervals.forEach(i=>clearInterval(i));
			}else {
				callback();
			}
		}, time));
	}

    /**
     *
     * @param {String} variable
     *
     * @returns {String}
     */
	css(variable) {
		let value = getComputedStyle(this).getPropertyValue(variable);
		if(!value)
			value = this.style.getPropertyValue(variable);
		// everything else
		return value;
	}

    /**
     *
     * @param {String} variable
     *
     * @returns {Number}
     */
	cssNumber(variable) {
		let value = this.css(variable);

		let number = parseFloat(value);
		// timings
		if (value.endsWith('ms')) {
			return number;
		}
		else if (value.endsWith('s')) {
			return number * 1000;
		}
		// everything else
		return number;
	}

	setCss(name, value){
		this.style.setProperty(name, value);
	}

	get visible() {
		return this.self.hidden == false;
	}

    /**
     * @param {Boolean} boolean
     */
	set visible(boolean) {
		if (boolean) {
			this.self.removeAttribute("hidden");
		}
		else {
			this.self.setAttribute("hidden", '');
		}
	}

	show(parent = null) {
		// attach to dom if I haven't already
		this.self.attach(parent);
		// and show
		this.self.visible = true;
		return this;
	}

	hide() {
		this.self.visible = false;
		return this;
	}

	remove() {
		this.self.parentElement?.removeChild(this.self);
		return this;
	}

    /**
     * Walk up dom tree looking for a closable element
     */
	close() {
		let ele = this.parentElement;
		while (ele['close'] == null) {
			ele = ele.parentElement;
			if(ele == null)
				return this;
		}
		ele['close']();
		return this;
	}

	attach(parent = null) {
		if (!this.self.parentElement) {
			if (parent == null)
				parent = document.body;
			parent.appendChild(this.self);
		}
		return this;
	}

    /**
     *
     * @param  {...Element} elements
     *
     * @returns {HTMLElement[]}
     */
	static castHtmlElements(...elements) {
		return /** @type {HTMLElement[]} */ ([...elements]);
	}
}
customElements.define('ui-basic', BasicElement);

const sleep = (time, value)=>new Promise(r=>setTimeout(()=>r(value),time));
window['sleep'] = sleep;

/**
 * Add items onto a element
 * 
 * @param {Element} element 
 * @param {Element|String|Element[]} content 
 */
function append(element, content){
	if(!element || content === undefined || content === null)
		return;
	if(typeof content == 'string' || typeof content == 'number'){
		element.innerHTML = content;
	}else if(Array.isArray(content)){
		element.append(...content);
	}else {
		element.appendChild(content);
	}
}

/**
 * Convert html text to a HTMLElement
 * 
 * @param {String} html 
 * 
 * @returns {HTMLElement}
 */
function htmlToElement(html){
	let d = document.createElement('div');
	d.innerHTML = html;
	return d.firstElementChild;
}

/**
 *
 * @param  {...Element} elements
 *
 * @returns {HTMLElement[]}
 */
function castHtmlElements(...elements) {
	return /** @type {HTMLElement[]} */ ([...elements]);
}

/**
 * shuffle the contents of an array
 * 
 * @param {*[]} array 
 */
function shuffle(array) {
	var currentIndex = array.length, temporaryValue, randomIndex;

	// While there remain elements to shuffle...
	while (0 !== currentIndex) {

		// Pick a remaining element...
		randomIndex = Math.floor(Math.random() * currentIndex);
		currentIndex -= 1;

		// And swap it with the current element.
		temporaryValue = array[currentIndex];
		array[currentIndex] = array[randomIndex];
		array[randomIndex] = temporaryValue;
	}

	return array;
}

/**
 * Downloads a file to the users machine - must be called from within a click event (or similar)
 * 
 * @param {String} filename 
 * @param {Object} json 
 */
function downloadJson(filename, json){
	const a = document.createElement('a');
	a.href = URL.createObjectURL( new Blob([JSON.stringify(json, null, '\t')], { type:`text/json` }) );
	a.download = filename;
	a.click();
}

/**
 * 
 * Load a script
 * 
 * @param {String} url 
 * 
 * @returns {Promise}
 */
async function dynamicallyLoadScript(url) {
	return new Promise(res=>{
		var script = document.createElement('script');  // create a script DOM node
		script.src = url;  // set its src to the provided URL
		script.onreadystatechange = res;
		script.onload = res;
		document.head.appendChild(script);  
	});
}

var utils = /*#__PURE__*/Object.freeze({
	__proto__: null,
	sleep: sleep,
	append: append,
	htmlToElement: htmlToElement,
	castHtmlElements: castHtmlElements,
	shuffle: shuffle,
	downloadJson: downloadJson,
	dynamicallyLoadScript: dynamicallyLoadScript
});

class Badge extends BasicElement {
	constructor(content, { icon = '' } = {}) {
		super(content);

		icon = icon || this.attributes.getNamedItem("icon")?.value;
		if (icon) {
			let i = document.createElement('i');
			let classes = icon.trim().split(" ");
			// include the default font-awesome class if one wasn't provided
			if(!classes.includes('fa') && !classes.includes('fab') && !classes.includes('fas'))
				i.classList.add('fa');
			i.classList.add(...classes);
			this.prepend(i);
		}
	}
}
customElements.define('ui-badge', Badge);

class Button extends BasicElement {

    /**
     *
     * @param {String|HTMLElement} content
     * @param {EventListenerOrEventListenerObject} callback callback when the button is clicked
     * @param {{icon?: String, style?: String, color?: String|boolean}} options
     */
	constructor(content, callback, { icon = '', style = 'button', color = false } = {}) {
		super(content);

		this.addEventListener('click', callback);

		this.classList.add(style);
		if (color)
			this.classList.add(color);

		icon = icon || this.attributes.getNamedItem("icon")?.value;
		if (icon) {
			let i = document.createElement('i');
			let classes = icon.trim().split(" ");
			// include the default font-awesome class if one wasn't provided
			if(!classes.includes('fa') && !classes.includes('fab') && !classes.includes('fas'))
				i.classList.add('fa');
			i.classList.add(...classes);
			this.prepend(i);
		}
		
	}

}
customElements.define('ui-button', Button);

class Cancel extends BasicElement {
	constructor() {
		super();

		this.innerHTML = this.innerHTML || "Cancel";

		this.addEventListener('click', this.close.bind(this));
	}
}
customElements.define('ui-cancel', Cancel);

class Card extends BasicElement {
	constructor(content) {
		super();

		this.setAttribute("ui-card", '');

		let con = content || this.innerHTML;
		this.innerHTML = `<div class="card"></div>`;
		this.setContent(con);

	}

	setContent(content) {
		if (typeof content == 'string') {
			this.querySelector('.card').innerHTML = content ?? '';
		}else {
			this.querySelector('.card').append(content);
		}
	}


	async flip() {
		this.flipped = !this.flipped;
		let v = this.cssNumber('--duration');
		return new Promise(res => setTimeout(res, v));
	}

	get flipped() {
		return this.getAttribute("flipped") == null;
	}

	set flipped(bool) {
		if (bool) {
			this.removeAttribute("flipped");
		}
		else {
			this.setAttribute("flipped", '');
		}
	}
}
customElements.define('ui-card', Card);

function decodeBase64(base64, enableUnicode) {
    var binaryString = atob(base64);
    if (enableUnicode) {
        var binaryView = new Uint8Array(binaryString.length);
        for (var i = 0, n = binaryString.length; i < n; ++i) {
            binaryView[i] = binaryString.charCodeAt(i);
        }
        return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));
    }
    return binaryString;
}

function createURL(base64, sourcemapArg, enableUnicodeArg) {
    var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
    var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
    var source = decodeBase64(base64, enableUnicode);
    var start = source.indexOf('\n', 10) + 1;
    var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
    var blob = new Blob([body], { type: 'application/javascript' });
    return URL.createObjectURL(blob);
}

function createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {
    var url;
    return function WorkerFactory(options) {
        url = url || createURL(base64, sourcemapArg, enableUnicodeArg);
        return new Worker(url, options);
    };
}

var WorkerFactory = createBase64WorkerFactory('', 'data:application/json;charset=utf-8;base64,', false);
/* eslint-enable */

class Code extends BasicElement {

	constructor(content) {
		super(content);

		this.setContent(content || this.innerHTML);
	}

	preprocess(content) {
		return content;
	}

	setContent(content){
		content = this.preprocess(content);
		// send the stuff off to a webworker to be prettified
		let worker = new WorkerFactory();
		worker.onmessage = (event) => {
			this.classList.add('hljs');
			this.innerHTML = event.data;
		};
		worker.postMessage(content);
	}
}
customElements.define('ui-code', Code);

/**
 * Context menu replacement
 * @example
 * 
 * ```
 * new ContextMenu()
 *      .addItem("Hello", ()=>{alert("hello")})
 *      .for(document.body);
 * ```
 */
class ContextMenu extends BasicElement {

	#attachments = new WeakMap();

	constructor(){
		super('<section></section>');

		this.hide = this.hide.bind(this);

		this.hide();

		this.target = null;

		for(let event of ["click", "oncontextmenu"]){
			this.addEventListener(event, this.hide);
			this.firstElementChild.addEventListener(event, (event)=>{event.stopPropagation();});
		}
	}

	/**
	 * Add the context menu to show on the provided element context events
	 * 
	 * @param {HTMLElement} element 
	 */
	for(element){
		let listener = (event)=>{
			this.target = element;
			// prevent the default contextmenu
			event.preventDefault();
			// show the menu
			this.style.left = event.pageX + "px";
			this.style.top = event.pageY + "px";
			this.show();
			// setup the hide behaviour
		};
		element.addEventListener("contextmenu", listener);
		element.setAttribute("context-menu", '');
		this.#attachments.set(element, listener);
		return this;
	}

	detach(element){
		let listener = this.#attachments.get(element);
		if(listener){
			element.removeAttribute("context-menu", '');
			element.removeEventListener("contextmenu", listener);
		}
	}

	/**
	 * Add a new item to the context menu
	 * 
	 * @param {String} text 
	 * @param {Function} action 
	 */
	addItem(text, action){
		let item = htmlToElement(`<div>${text}</div>`);
		item.addEventListener('click', ()=>{action(this.target); this.hide();});
		this.firstElementChild.appendChild(item);
		return this;
	}

	/**
	 * Add a line break to the context menu
	 */
	addBreak(){
		this.firstElementChild.appendChild(htmlToElement(`<hr/>`));
		return this;
	}
}
customElements.define('ui-context', ContextMenu);

class Toggle extends BasicElement {
	constructor(v, changeCallback) {
		super(`<input type="checkbox"/><div><span></span></div>`);
		this.value = v ?? (this.attributes.getNamedItem("value")?.value == "true");

		if(changeCallback){
			this.querySelector('input').addEventListener('change', ()=>{
				changeCallback(this.value);
			});
		}
	}

	get value() {
		return this.querySelector('input').checked;
	}

	set value(b) {
		this.querySelector('input').checked = b;
	}
}
customElements.define('ui-toggle', Toggle);

/****** FORM COMPONENTS ******/

class Form extends BasicElement {

	static STYLE = {
		ROW: { parent: 'table', wrap: 'tr', label: 'th', value: 'td' },
		INLINE: { parent: null, wrap: 'span', label: 'label', value: 'span' }
	};


	constructor(template) {
		super();

		this.template = template;
		this.changeListeners = [];
		this.onChange = this.onChange.bind(this);

		this.formStyle = Form.STYLE.ROW;

		this.value = {};
	}


	async build(json) {
		this.changeListeners = [];
		let eles = await this.jsonToHtml(this.template, json);
		this.append(...eles);
		// add change listeners
		let inputs = this.querySelectorAll('[data-key]');
		for (let input of inputs) {
			input.addEventListener('change', this.onChange);
		}
		// finally trigger them for the starting state
		this.onChange();

		return this;
	}

	onChange() {
		let json = this.json();
		this.changeListeners.forEach(l => l(json));
		this.value = json;
	}

	json(includeHidden = true) {
		let json = {};

		let inputs = this.querySelectorAll('[data-key]');
		for (let input of inputs) {
			// skip hidden inputs is required
			if(!includeHidden && input.closest('[hidden]'))
				continue;
			let parent = json;
			// grab the correct place to store this value
			let keys = input['dataset']['key'].split('.');
			let key = keys.pop();
			// initialize any nesting
			for (let k of keys) {
				if (Array.isArray(parent)) {
					let a = {};
					parent.push(a);
					parent = a;
				}
				if (k.includes('[]')) {
					k = k.replace('[]', '');
					parent[k] = parent[k] ?? [];
				}
				else {
					parent[k] = parent[k] ?? {};
				}
				parent = parent[k];
			}
			// read the value
			let value = input[input['type'] == 'checkbox' ? 'checked' : 'value'];
			if(input['type'] == 'number' || input.dataset.format == 'number'){
				value = parseFloat(value);
			}

			// if the last step is an array - init it
			if (key.includes('[]')) {
				key = key.replace('[]', '');
				parent[key] = parent[key] ?? [];
				parent = parent[key];
				key = null;
			}

			// if we are dealing with an array fiddle the key
			if (Array.isArray(parent)) {
				if (key === null) {
					// key is just the next unset entry
					key = parent.length;
				}
				else {
					// array of objects -
					if (parent.length == 0 || parent[parent.length - 1][key] != null) {
						parent.push({});
					}
					parent = parent[parent.length - 1];
				}
			}

			// finally set the value on the object (or array)
			parent[key] = value;
		}

		return json;
	}


	async jsonToHtml(template, json, jsonKey = '', options = { style: this.formStyle }) {
		let elements = [];
		if (!Array.isArray(template))
			template = [template];
		for (let item of template) {
			if (typeof item == "string") {
				if (item.indexOf(":") == -1) {
					item = {
						key: null,
						type: item
					};
				}
				else {
					item = {
						key: item.split(':')[0],
						type: item.split(':')[1]
					};
					if (json == null)
						json = {};
				}
			}
			elements.push(await this.oneItem(item, item.key ? json[item.key] : json, item.key ? ((jsonKey ? jsonKey + "." : '') + item.key) : jsonKey, options));
		}

		if (options.style?.parent) {
			let parent = document.createElement(options.style?.parent);
			parent.append(...elements);
			return [parent];
		}
		else {
			return elements;
		}
	}

	async oneItem(template, json, jsonKey, { style = Form.STYLE.ROW } = {}) {

		let element = document.createElement(style.wrap);

		if (template.hidden) {
			this.changeListeners.push((json) => {
				element.hidden = template.hidden(json, element);
			});
		}

		let render = async ()=>{
			let label;
			if (template.key) {
				label = document.createElement(style.label);
				label.innerHTML = template.name ?? template.key;
				if (template.hint) {
					let hint = document.createElement('div');
					hint.innerHTML = template.hint;
					label.append(hint);
				}
				element.append(label);
			}

			let wrapper = document.createElement(style.value);
			wrapper.classList.add('value');
			element.append(wrapper);

			if (typeof template.type == "string") {
				let html = '';
				switch (template.type) {
					//
					case 'header':
						label.setAttribute("colspan", "2");
						label.classList.add("header");
						wrapper.remove();
						break;
					case 'description':
						wrapper.setAttribute("colspan", "2");
						wrapper.classList.add("description");
						wrapper.innerHTML = template.key;
						label.remove();
						break;
					case 'hr':
						wrapper.setAttribute("colspan", "2");
						wrapper.innerHTML = "<hr/>";
						break;
					//
					case 'checkbox':
						html += `<input data-key="${jsonKey}" type="checkbox" ${json ? 'checked' : ''}/>`;
						wrapper.innerHTML = html;
						break;
					case 'toggle':
						html += `<ui-toggle data-key="${jsonKey}" value="${json ?? false}"></ui-toggle>`;
						wrapper.innerHTML = html;
						break;
					case 'list':
						html += `<select data-key="${jsonKey}" data-format="${template.format}">`;
						let options = template.options;
						if (!Array.isArray(options))
							options = await options();
						html += options.map(v => `<option 
								${(json == (v.value ? v.value : v)) ? 'selected' : ''}
								value=${v.value ? v.value : v}>${v.name ? v.name : v}</option>`).join('');
						html += `</select>`;
						wrapper.innerHTML = html;
						break;
					case 'text':
						html += `<textarea data-key="${jsonKey}">${json ?? ''}</textarea>`;
						wrapper.innerHTML = html;
						break;
					case 'string':
						let input = htmlToElement(`<input data-key="${jsonKey}" type="text" placeholder="${template.placeholder ?? ''}"/>`);
						input.value = json ?? null;
						wrapper.append(input);
						break;
					case 'number':
						html += `<input data-key="${jsonKey}" type="number" value="${json ?? ''}"/>`;
						wrapper.innerHTML = html;
						break;
					// complex types
					// nested types (compound object)
					case 'compound':
						//
						wrapper.append(...await this.jsonToHtml(template.children, json ?? {}, jsonKey));
						break;
					// repeating object
					case 'array':
						// the element repeats multiple times
						jsonKey = jsonKey + "[]";

						let tStyle = template.style ?? 'INLINE';

						let substyle = Form.STYLE[tStyle];

						let contain = document.createElement('div');
						contain.classList.add('array');
						contain.classList.add(tStyle);
						// add button
						let button = new Button("Add", null, { icon: 'fa-plus' });


						let createItem = async (json) => {

							let item = document.createElement('span');
							item.classList.add('item');

							item.append(...await this.jsonToHtml(template.children, json, jsonKey, { style: substyle }));

							item.append(new Button("", () => {
								item.remove();
							}, { icon: 'fa-trash', style: "text", color: "error" }));
							
							let inputs = item.querySelectorAll('[data-key]');
							for (let input of inputs) {
								input.addEventListener('change', this.onChange);
							}

							contain.append(item);
						};
						button.addEventListener('click', () => createItem(Array.isArray(template.children)?{}:null));

						if (Array.isArray(json)) {
							for(let j of json){
								await createItem(j);
							}

						}

						wrapper.append(contain);

						wrapper.append(button);

						break;
				}
			}
			else if (typeof template.type == 'function') {
				let input = new template.type(json);
				input.dataset['key'] = jsonKey;
				wrapper.append(input);
			}

			/*if (element.children.length == 1)
				return element.firstElementChild;*/

			return element;
		};

		if(template.redraw){
			let lastValue = this.value[template.redraw];

			this.changeListeners.push(async (fullJson) => {
				let newValue = fullJson[template.redraw];
				if(lastValue!=newValue){
					element.innerHTML = "";
					await render();
					lastValue = newValue;
				}
			});
		}

		return await render();
	}
}
customElements.define('ui-form', Form);

class HashHandler{

	/** @type {RegExp}*/
	path;

	/** @type {} */
	pathVariables = [];

	func;

	constructor(path, func){
		// extract path args
		while(path.includes('{')){
			let variable = path.substring(path.indexOf('{'), path.indexOf('}')+1);
			path = path.replace(variable, "([^/]*)");
			this.pathVariables.push(HashHandler.v(variable.substring(1,variable.length-1)));
		}
		
		this.path = new RegExp(path);
	
		this.func = func;
	}

	/**
	 * 
	 * @param {Number|Boolean|Object} input 
	 * 
	 * @returns {{name: String, set: Function}}
	 */
	static v(input){
		let [name,type] = input.split(':');
		return {
			name: name,
			set: (obj, value)=>{
				if(!value)
					return;
				switch(type){
					case 'number':
						value = parseFloat(value);
						break;
					case 'boolean':
						value = (value.toLowerCase() == 'true');	
						break;
					case 'json':
						value = JSON.parse(value);	
						break;
				}
				obj[name] = value;
			}
		}
		
	}

	/**
	 * @param {String} path 
	 * 
	 * @returns {Promise<[Element,number]|false>}
	 */
	async handle(path, oldPath){

		let parts = path.match(this.path);
		if(!parts)
			return false;

		// compute vars
		let args = {};
		parts.shift();
		for(let v of this.pathVariables)
			v.set(args, parts.shift());

		// and call the function
		return await this.func(args);
	}
}

/**
 * @example
 * 
 * ```
 * let hash = new HashManager();
 * handler('home', ()=>new Panel("home"));
 * handler('settings', ()=>new Panel("settings"));
 * hash.attach(document.body);
 * ```
 */
class HashManager extends BasicElement {


	key = null;
	hash = "";
	depth = 0;

	/** @type {HashHandler[]} */
	handlers = [];

	position = [0,0];

	static DIRECTION = {
		NONE: 0,

		LEFT: 1,
		RIGHT: 2,
		BOTTOM: 3,
		TOP: 4,

		RANDOM: 100
	};


	static Handler = HashHandler;

	constructor(key=null) {
		super();
		this.key = key;
		window.addEventListener('hashchange', () => this.hashChange());
	}

	get value(){
		return this.hash;
	}

	handler(path, func){
		this.handlers.push(new HashHandler(path, func));
		return this;
	}

	addHandler(h) {
		this.handlers.push(h);
	}

	set(value){
		let hash = window.location.hash.substring(1);
		let pairs = hash.split('|').filter(i=>i!='').map(pair=>pair.includes('=')?pair.split('=',2):[null,pair]);
		let pair = pairs.find(i=>i[0]==this.key);
		if(pair == null){
			pair = [this.key,null];
			pairs.push(pair);
		}
		pair[1] = value;

		window.location.hash = pairs.map(p=>p[0]?p.join('='):p[1]).join('|');
	}

	async hashChange() {
		let hash = window.location.hash.substring(1);
		let pairs = hash.split('|').map(pair=>pair.includes('=')?pair.split('=',2):[null,pair]);

		
		let pair = pairs.find(i=>i[0]==this.key);
		if(pair == null)
			pair = [this.key,""];
		let newHash = pair[1];
		let oldHash = this.hash;
		
		this.hash = newHash;

		if(this.hash == oldHash)
			return;

		// work out the new content
		for (let handler of this.handlers) {
			let result = await handler.handle(newHash, oldHash);
			if (result) {
				await this.swapContent(result[0], result[1]);
				break;
			}
		}

	}

	/**
	 * 
	 * @param {*} body 
	 * @param {Number|[Number,Number]} direction 
	 */
	async swapContent(body, direction = HashManager.DIRECTION.RIGHT) {
		let content = document.createElement('content');

		append(content, body);

		if (this.firstElementChild == null)
			return this.appendChild(content);

		let enter, exit;
		if (direction == HashManager.DIRECTION.RANDOM) {
			let dirs = [HashManager.DIRECTION.RIGHT, HashManager.DIRECTION.LEFT, HashManager.DIRECTION.TOP, HashManager.DIRECTION.BOTTOM];
			direction = dirs[Math.floor(Math.random() * dirs.length)];
		}
		if(Array.isArray(direction)){
			console.log(this.position, direction);
			let newPosition = direction;
			// positional slide mode
			if(this.position[0] != direction[0]){
				if(this.position[0] > direction[0]){
					direction = HashManager.DIRECTION.LEFT;
				}else {
					direction = HashManager.DIRECTION.RIGHT;
				}
			}else if(this.position[1] != direction[1]){
				if(this.position[1] < direction[1]){
					direction = HashManager.DIRECTION.BOTTOM;
				}else {
					direction = HashManager.DIRECTION.TOP;
				}
			}else {
				// both the same... thanks
				direction = HashManager.DIRECTION.RIGHT;
			}
			this.position = newPosition;
		}
		switch (direction) {
			case HashManager.DIRECTION.RIGHT:
				[enter, exit] = ['right', 'left'];
				break;
			case HashManager.DIRECTION.LEFT:
				[enter, exit] = ['left', 'right'];
				break;
			case HashManager.DIRECTION.TOP:
				[enter, exit] = ['top', 'bottom'];
				break;
			case HashManager.DIRECTION.BOTTOM:
				[enter, exit] = ['bottom', 'top'];
				break;
		}

		// how long the animation will take is defined in css
		let timing = this.cssNumber('--timing');

		// add new content in start position
		content.classList.add(enter);
		this.appendChild(content);

		// later...
		sleep(50).then(() => {
			// slide in new content
			content.classList.remove(enter);

			// and slide old content out
			this.firstElementChild.classList.add(exit);

			// remove old content once done
			setTimeout(() => this.firstElementChild.remove(), timing);
		});

	}
}

customElements.define('ui-hash', HashManager);

class Json extends Code {
	constructor(content) {
		super(content);
	}

	preprocess(content) {
		if (typeof content == 'object')
			return JSON.stringify(content, null, "\t");
		return JSON.stringify(JSON.parse(content), null, "\t");
	}
}
customElements.define('ui-json', Json);

let uuid = 0;


/**
 * @callback itemElement
 * @param {Object} item
 * @returns {HTMLElement}
 */

/**
 * @callback attributeValue
 * @param {Object} item
 * @returns {Number|String}
 */

/**
 * @callback attributeDisplayValue
 * @param {Object} item
 * @returns {String}
 */

/** @typedef {Object} Attr
 *  @property {Number} id
 * 	@property {String} name
 *  @property {attributeValue} value
 *  @property {attributeDisplayValue} value
 */

class List extends BasicElement{

	// weakmap will ensure that we don't hold elements after they have fallen out of both the DOM and the data list
	/** @type {WeakMap<Object,HTMLElement>} */
	elementMap = new WeakMap();

	static ASC = true;
	static DESC = false;

	/** @type {boolean} indictes if the item display state is out of date */
	dirty = true;

	/** @type {{attr: Attr, asc: Boolean}|null} */
	_sort = null;

	/** @type {Object.<String, Attr>} */
	attrs = {};

	static ITEMS_COLUMNS_KEY = "--item-columns";
	static ITEMS_PER_PAGE_KEY = "--items-per-page";

	/**
	 * 
	 * @param {itemElement} itemDisplay 
	 * @param {{itemColumns?:number, itemsPerPage?: number}} options 
	 */
	constructor(itemDisplay, options = {}) {
		super();

		this.setAttribute("ui-list", '');

		this.innerHTML = this.listLayout;

		this.listBody = /** @type {HTMLElement} */ (this.querySelector('.list'));

		this._sort = null;

		this._data = [];
		this.display = [];

		this.lookup = {};

		this._filterFunc = null;

		this._itemDisplayFunc = itemDisplay;

		this.pageNumber = 0;

		if(options.itemColumns)
			this.itemColumns = options.itemColumns;
		if(options.itemsPerPage)
			this.itemsPerPage = options.itemsPerPage;
	}

	set itemColumns(value){
		this.setCss(List.ITEMS_COLUMNS_KEY, value);
	}

	get itemsPerPage(){
		let n =  this.cssNumber(List.ITEMS_PER_PAGE_KEY);
		return n || 24;
	}

	set itemsPerPage(value){
		this.setCss(List.ITEMS_PER_PAGE_KEY, value);
	}

	get listLayout(){
		return `
	<!-- pagination -->
	<header>
		<span>Sort By <span class="sort"></span></span>
		<ui-spacer></ui-spacer>
		<span class="paging top"></span>
	</header>

	<content class="list">
	</content>

	<!-- pagination -->
	<footer>
		<ui-spacer></ui-spacer>
		<div class="paging bottom"></div>
	</footer>`
	}

	set data(data){
		this._data = data;
		for (let item of this._data) {
			if (item.__id == null)
				item.__id = item.id ? item.id : ('' + uuid++);
		}
		this.dirty = true;
	}

	get data(){
		return this._data;
	}

	/**
	 * 
	 * @param {String} name 
	 * @param {*} valueFunc 
	 * @param {*} displayFunc 
	 * @param {*} width 
	 */
	addAttribute(name, valueFunc = (i)=>i[name], displayFunc = valueFunc, width = null) {
		this.attrs[name] = {
			"id": uuid++,
			"name": name,
			"width": width,
			"value": (typeof valueFunc == "string") ? i => i[valueFunc] : valueFunc,
			"displayFunc": (typeof displayFunc == "string") ? i => i[displayFunc] : displayFunc
		};
		this.dirty = true;
		return this;
	}

	_filtered(item) {
		return this._filterFunc == null || this._filterFunc(item);
	}

	filter(func){
		this._filterFunc = func;
		this.dirty = true;
		this.page(0);
	}

	/**
	 * Display the sorting headers
	 */
	sortDisplay(){
		let wrapper = this.querySelector('.sort');

		let select = document.createElement('select');

		select.innerHTML = Object.values(this.attrs).map(attr=>
			attr.value?
			`<option value="${attr.name}:asc" >▲ ${attr.name}</option>
			<option value="${attr.name}:desc">▼ ${attr.name}</option>`:'').join('');
		select.value = this._sort?`${this._sort.attr.name}:${this._sort.asc?'asc':'desc'}`:null;
		select.onchange = ()=>{
			let vs = select.value.split(':');
			this.sort(vs[0], vs[1]=='asc');
		};

		wrapper.innerHTML = "";
		wrapper.appendChild(select);
	}

	render() {

		// TODO render busy spinner

		//render headers
		this.sortDisplay();
		
		// setup paging
		this.page();

		// show the body
		//this.listBody.style.removeProperty('display');
	}

	async getItemElement(item){
		if(!this.elementMap.has(item)){
			this.elementMap.set(item, await this.renderItem(item));
		}
		return this.elementMap.get(item);
	}

	async renderItem(item){
		return await this._itemDisplayFunc(item);
	}

	/**
	 * 
	 * @param {Attr|String} attribute name of the attribute to sort on
	 * @param {Boolean} asc ASC of DESC sort
	 */
	sort(attribute = this._sort?.attr, asc = !this._sort?.asc) {
		this.dirty = true;

		let attr = (typeof attribute == 'string')?this.attrs[attribute]:attribute;

		if(attribute == null){
			this._sort = null;
		}else {
			this._sort = {
				attr: attr,
				asc: asc
			};
		}

		if (this.data.length == 0)
			return;

		// render
		this.render();
	}

	/**
	 * 
	 * @param {Number} page ZERO-INDEXED page number
	 */
	async page(page = this.pageNumber) {

		// rebuild the display list if dirty
		if(this.dirty){
			// grab raw data
			this.display = [...this.data];
			// filter
			this.display = this.display.filter(i=>this._filtered(i));
			// sort
			if(this._sort){
				this.display = this.display.sort((_a, _b) => {
					let a = _a?this._sort.attr.value(_a):null;
					let b = _b?this._sort.attr.value(_b):null;
					if(a == b)
						return 0;
					let asc = (this._sort.asc ? 1 : -1);
					if(b == null)
						return asc;
					if(a == null)
						return -asc;
					return asc*(''+a).localeCompare(''+b, "en", {sensitivity: 'base', ignorePunctuation: 'true', numeric: true});
				});
			}
			this.dirty = false;
			this.pageNumber = 0;
		}
		
		// compute paging numbers
		let visibleCount = this.display.length;
		let pages = Math.ceil(visibleCount / this.itemsPerPage);
		let needsPaging = pages > 1;
		this.pageNumber = isNaN(page)?0:Math.max(Math.min(page, pages-1), 0);

		// render the paging if needed
		if (needsPaging) {
			let paging = this.pagingMarkup(this.pageNumber, pages, visibleCount);
			this.querySelector('.paging.top').innerHTML = paging;
			this.querySelector('.paging.bottom').innerHTML = paging;

			// add auto paging callback 
			BasicElement.castHtmlElements(...this.querySelectorAll('[data-page]')).forEach(ele => ele.addEventListener('click', () => {
				this.page(parseInt(ele.dataset['page']));
			}));
		}else {
			this.querySelector('.paging.top').innerHTML = "";
			this.querySelector('.paging.bottom').innerHTML = "";
		}

		// finally actually add the items to the page
		this.listBody.innerHTML = "";
		for(let index = this.pageNumber*this.itemsPerPage; index < (this.pageNumber+1)*this.itemsPerPage && index < visibleCount; index++){
			let item = this.display[index];
			this.listBody.append(await this.getItemElement(item));
		}
	}

	pagingMarkup(page, pages, visibleCount){
		let html = '';
		let extraButtons = 1;
		html += `${visibleCount} items`;
		html += `<ui-button data-page="0" class="near ${page==0?'active':''}">1</ui-button>`;
		let start = page - extraButtons;
		let end = page + extraButtons + 1;
		if(start < 1){
			end += 1-start;
			start = 1;
		}
		if(end > pages-1){
			start -= (end - pages)+1;
			end = pages -1;
			start = Math.max(1, start);
		}
		if(start > 1){
			html += `<span>...</span>`;
		}
		for (let p = start; p < end; p++) {
			html += `<ui-button data-page="${p}" class="${p == page ? 'active' : ''}">${p + 1}</ui-button>`;
		}
		if(end < pages-1){
			html += `<span>...</span>`;
		}
		html += `<ui-button data-page="${pages - 1}" class="near ${page==pages-1?'active':''}">${pages}</ui-button>`;
		return html;
	}
}
customElements.define('ui-list', List);

/**
 * Table is a special case of List with a more automatic layout
 */
class Table extends List{

	/**
	 * 
	 * @param {{itemsPerPage?: number}} options 
	 */
	constructor(options={}) {
		super(async (item)=>{
			let tr = document.createElement('tr');
			tr.dataset['tableId'] = item.__id;
			// render item (possible hidden)
			for (let header of Object.values(this.attrs)) {
				let cell = document.createElement('td');
				let content = await header.displayFunc(item);
				append(cell, content);
				tr.append(cell);
			}
			return tr;
		}, options);

		this.setAttribute("ui-table", '');
	}

	get listLayout(){
		return `<table>
<thead>
	<!-- pagination -->
	<tr><td class="paging top" colspan="100"></td></tr>

	<tr class="headers"></tr>
	<!-- filters -->
</thead>
<tbody class="list">
</tbody>
<tfoot>
	<!-- pagination -->
	<tr><td class="paging bottom" colspan="100"></td></tr>
</tfoot>
</table>`
	}

	/**
	 * Display the sorting headers
	 */
	sortDisplay(){
		let header = this.querySelector('thead tr.headers');
		let headers =  Object.values(this.attrs);
		let html = '';
		for (let header of headers) {
			html += `<th data-table-id="${header.id}" ${this.attrs[header.name].value?`data-sort="${header.name}"`:''} style="${header.width ? `width:${header.width}` : ''}">${header.name}</th>`;
		}
		header.innerHTML = html;
		header.querySelectorAll('th').forEach(
			ele=>{
				// if it's a sortable column add the click behaviour
				if(ele.dataset.sort){
					ele.onclick = (event)=>{
						this.sort(ele.dataset.sort);
					};
				}
			}
		);

		// highlight the sorted header
		if (this._sort)
			this.querySelector(`thead tr.headers th[data-table-id='${this._sort.attr.id}']`).classList.add(this._sort.asc ? 'asc' : 'desc');
	}
}
customElements.define('ui-table', Table);

class Panel extends BasicElement {

    /**
     *
     * @param {String|Element|Element[]} content
     * @param {{title?: String, clazz?: String, buttons?: String, header?: boolean, footer?: boolean}} param1
     */
	constructor(content = '', { title = '', clazz = '', buttons = '', header = false, footer = false} = {}) {
		super();

		this.setAttribute("ui-panel", '');

		if (!this.innerHTML.trim()) {
			this.innerHTML = `
				${(header || title)? `<header>${title}</header>` : ''}
				<content></content>
				${(footer || buttons)? `<footer>${buttons}</footer>` : ''}
			`;

			append(this.querySelector('content'), content);
		}

		if (clazz) {
			this.classList.add(clazz);
		}
	}

	/**
	 * 
	 * @param  {...String|HTMLElement} elements 
	 */
	append(...elements) {
		append(this.querySelector('content'), elements);
	}

	header(...elements){
		append(this.querySelector('header'), elements);
	}

	footer(...elements){
		append(this.querySelector('footer'), elements);
	}
}
customElements.define('ui-panel', Panel);

class Splash extends BasicElement {

	constructor(content, { dismissable = false } = {}) {
		super(content);

		if (dismissable) {
			this.addEventListener('mousedown', this.remove);
		}
	}
}
customElements.define('ui-splash', Splash);

class Modal extends Splash {
	constructor(content, { title = '', clazz = '', buttons = '', dismissable = true, header = false, footer = false } = {}) {
		super('', { dismissable: dismissable });

		this.setAttribute("ui-modal", '');

		let panel = new Panel(content, { title, clazz, buttons, header, footer});
		panel.addEventListener("mousedown", () => event.stopPropagation());
		// rebind panel to parent splash so hide/show etc call parent
		panel.self = this;
		this.appendChild(panel);
	}

	/**
	 * @type {Panel}
	 */
	get panel(){
		return this.querySelector("ui-panel");
	}

	close() {
		this.self.remove();
		return this;
	}
}
customElements.define('ui-modal', Modal);

class Spacer extends BasicElement {
	constructor() {
		super();
	}
}
customElements.define('ui-spacer', Spacer);

class Spinner extends BasicElement {
	constructor() {
		super();

		let size = this.attributes.getNamedItem("size")?.value || "1em";
		this.style.setProperty("--size", size);
	}
}
customElements.define('ui-spinner', Spinner);

class Toaster extends BasicElement{
	constructor(){
		super();
		this.attach();
	}
}
customElements.define('ui-toaster', Toaster);

class Toast extends BasicElement {
	constructor(message, { level = 'info' } = {}) {
		super(message);

		let i = document.createElement('i');
		let icon = { 'debug': 'fa-bug', 'info': 'fa-info-circle', 'warn': 'fa-exclamation-circle', 'error': 'fa-exclamation-triangle', 'success': 'fa-check-circle' }[level];
		i.classList.add("fa", icon);
		this.prepend(i);

		if (!document.querySelector('ui-toaster')) {
			new Toaster();
		}
		let toaster = document.querySelector('ui-toaster');

		this.classList.add(level);
		toaster.prepend(this);
		let count = document.querySelectorAll('ui-toast').length;
		setTimeout(() => this.style.marginTop = '10px', 10);
		setTimeout(() => { this.style.marginTop = '-50px'; this.style.opacity = '0'; }, 4800);
		setTimeout(() => this.remove(), 5000);
	}
}
customElements.define('ui-toast', Toast);

// @ts-ignore
let URL$1 = import.meta.url;
let css = [
	URL$1 + "/../ui.css",
	"https://fonts.googleapis.com/css2?family=Nunito+Sans:ital,wght@0,200;0,300;0,400;0,600;0,700;0,800;0,900;1,200;1,300;1,400;1,600;1,700;1,800;1,900&display=swap",
	"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.css"];


let h = document.createElement('head');
h.innerHTML = css.map(url=>`<link href="${url}" rel="stylesheet">`).join('');
document.head.append(...h.childNodes);

const UI = {
	BasicElement,

	Badge,
	Button,
	Cancel,
	Card,
	Code,
	ContextMenu,
	Form,
	HashManager,
	Json,
	List, Table,
	Modal,
	Panel,
	Spacer,
	Spinner,
	Splash,
	Toast,
	Toggle,

	utils
};



window["UI"] = UI;

export { Badge, BasicElement, Button, Cancel, Card, Code, ContextMenu, Form, HashManager, Json, List, Modal, Panel, Spacer, Spinner, Splash, Table, Toast, Toggle, utils };
